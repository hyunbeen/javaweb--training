/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M26
 * Generated at: 2017-10-20 07:30:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import cacao.model.vo.*;

public final class adminOrderMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("cacao.model.vo");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("      \r\n");
      out.write("\r\n");
List<Order> orderList = (List) request.getAttribute("orderResult"); 
      out.write('\r');
      out.write('\n');

   String pjName = "/Cacao"; 

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js\"></script>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title> What to do </title>\r\n");
      out.write("</head>\r\n");
      out.write("<body ng-app=\"myApp\" ng-controller=\"userCtrl\">\r\n");
      out.write("\r\n");
      out.write("<div style=\"width:100%\">\r\n");
      out.write("<img alt=\"\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/admin/adminorder.png\" style=\"width: 100%; height: 240px\">\r\n");
      out.write("\r\n");
      out.write("<div display=\"inline\" style=\"width:60%; float:left; margin-left: 30px;\">\r\n");
      out.write("\r\n");
      out.write("<h2><a class=\"w3-btn w3-green w3-ripple\" href=\"/Cacao/Admin?cmd=main-page\">뒤로가기</a></h2>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table class=\"w3-table w3-bordered w3-striped\">\r\n");
      out.write("  <tr>\r\n");
      out.write("  \t<th></th>\r\n");
      out.write("    <th>주문번호</th>\r\n");
      out.write("    <th>결제방식</th>\r\n");
      out.write("    <th>주문자</th>\r\n");
      out.write("    <th>총결제금액</th>\r\n");
      out.write("    <th>주문상태</th>\r\n");
      out.write("    <th>수정</th>\r\n");
      out.write("  </tr>\r\n");
      out.write("\r\n");
      out.write("  <tr ng-repeat=\"user in users\">\r\n");
      out.write("  \t<td style=\"visibility: hidden;\">{{user.ordercancel}}</td>\r\n");
      out.write("  \t<td>{{user.orderid}}</td>\r\n");
      out.write("    <td>{{user.orderpay}}</td>\r\n");
      out.write("    <td>{{user.ordername}}</td>\r\n");
      out.write("    <td>{{user.ordertotal}}</td>\r\n");
      out.write("    <td>{{user.orderstatus}}</td>\r\n");
      out.write("    <td>\r\n");
      out.write("      <button class=\"w3-btn w3-ripple\" ng-click=\"editUser(user.id)\">✎ Edit</button>\r\n");
      out.write("    </td>\r\n");
      out.write("  </tr>\r\n");
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("<br>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div style=\"width:30%; float:left; margin-left:30px; margin-top:20px;\">\r\n");
      out.write("<!-- <button class=\"w3-btn w3-green w3-ripple\" ng-click=\"editUser('new')\">✎ Create New User</button> -->\r\n");
      out.write("\r\n");
      out.write("<form ng-hide=\"hideform\" id='orderModify' name='orderModify' action=\"");
      out.print(pjName );
      out.write("/Admin?cmd=adminOrderModify-page\" method='post'>\r\n");
      out.write("<!--   <h3 ng-show=\"edit\">등록</h3> -->\r\n");
      out.write("  <h3 ng-hide=\"edit\">수정</h3>\r\n");
      out.write("    \r\n");
      out.write("    <label>주문번호</label>\r\n");
      out.write("    <input class=\"w3-input w3-border\" type=\"text\" id = \"orderdid\" name = \"orderdid\" ng-model=\"orderid\" readonly>\r\n");
      out.write("  <br>\r\n");
      out.write("    <label>결제방식</label>\r\n");
      out.write("    <input class=\"w3-input w3-border\" type=\"text\" name = \"orderpay\" ng-model=\"orderpay\" readonly>\r\n");
      out.write("  <br>\r\n");
      out.write("    <label>주문자</label>\r\n");
      out.write("    <input class=\"w3-input w3-border\" type=\"text\" name = \"ordername\" ng-model=\"ordername\" readonly>\r\n");
      out.write("  <br>\r\n");
      out.write("   <br>\r\n");
      out.write("    <label>총결제금액</label>\r\n");
      out.write("    <input class=\"w3-input w3-border\" type=\"text\" name = \"ordertotal\" ng-model=\"ordertotal\" readonly>\r\n");
      out.write("  <br>\r\n");
      out.write("  <label>주문상태</label>\r\n");
      out.write("    <select id=\"orderstatus\" name=\"orderstatus\" class=\"w3-input w3-border\" ng-model=\"orderstatus\">\r\n");
      out.write("     \t\t <option value=\"0\">유형을 선택하세요</option>\r\n");
      out.write("     \t\t <option value=\"결제대기\">결제대기</option>\r\n");
      out.write("     \t\t <option value=\"결제완료\">결제완료</option>\r\n");
      out.write("     \t\t <option value=\"결제취소\">결제취소</option>\r\n");
      out.write("     \t\t <option value=\"배송준비\">배송준비</option>\r\n");
      out.write("     \t\t <option value=\"배송중\">배송중</option>\r\n");
      out.write("     \t\t <option value=\"배송완료\">배송완료</option>\r\n");
      out.write("     \t\t <option value=\"취소대기\">취소대기</option>\r\n");
      out.write("     \t\t <option value=\"배송취소\">배송취소</option>\r\n");
      out.write("   \t</select>\r\n");
      out.write("  <br>\r\n");
      out.write("  <input type=\"submit\" class=\"w3-btn w3-green w3-ripple\" ng-disabled=\"error || incomplete\" value=\"✔ Save Changes\">\r\n");
      out.write("    <input style=\"visibility: hidden;\"class=\"w3-input w3-border\" ng-model=\"ordercancel\" id=\"ordercancel\" name=\"ordercancel\" type=\"text\">\r\n");
      out.write("  \r\n");
      out.write("</form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("angular.module('myApp', []).controller('userCtrl', function($scope) {\r\n");
      out.write("$scope.orderid = '';\r\n");
      out.write("$scope.orderpay = '';\r\n");
      out.write("$scope.ordername = '';\r\n");
      out.write("$scope.ordertotal = '';\r\n");
      out.write("$scope.orderstatus = '';\r\n");
      out.write("$scope.ordercancel = '';\r\n");
      out.write("$scope.users = [\r\n");
      out.write("\r\n");
for(int i=0; i< orderList.size(); i++){ 
      out.write("\r\n");
      out.write("\t{id:");
      out.print(i+1);
      out.write(", orderid:'");
      out.print(orderList.get(i).getdId());
      out.write("', orderpay:'");
      out.print(orderList.get(i).getdPay());
      out.write("', ordername: \"");
      out.print(orderList.get(i).getdName());
      out.write("\", ordertotal: \"");
      out.print(orderList.get(i).getdTotal());
      out.write("\", orderstatus: \"");
      out.print(orderList.get(i).getdStatus());
      out.write("\", ordercancel: \"");
      out.print(orderList.get(i).getdCancel());
      out.write("\"},\r\n");
}
      out.write("\r\n");
      out.write("];\r\n");
      out.write(" \r\n");
      out.write("//alert($scope.users.length);\r\n");
      out.write("\r\n");
      out.write("$scope.edit = true;\r\n");
      out.write("$scope.error = false;\r\n");
      out.write("$scope.incomplete = false; \r\n");
      out.write("$scope.hideform = true; \r\n");
      out.write("$scope.editUser = function(id) {\r\n");
      out.write("  $scope.hideform = false;\r\n");
      out.write("  if (id == 'new') {\r\n");
      out.write("    $scope.edit = true;\r\n");
      out.write("    $scope.incomplete = true;\r\n");
      out.write("    $scope.orderid = '';\r\n");
      out.write("    $scope.orderpay = '';\r\n");
      out.write("    $scope.ordername = '';\r\n");
      out.write("    $scope.ordertotal = '';\r\n");
      out.write("    $scope.orderstatus = '';\r\n");
      out.write("    $scope.ordercancel = '';\r\n");
      out.write("    } else {\r\n");
      out.write("   $scope.edit = false;\r\n");
      out.write("   $scope.orderid = $scope.users[id-1].orderid;\r\n");
      out.write("   $scope.orderpay = $scope.users[id-1].orderpay;\r\n");
      out.write("   $scope.ordername = $scope.users[id-1].ordername;\r\n");
      out.write("   $scope.ordertotal = $scope.users[id-1].ordertotal;\r\n");
      out.write("   $scope.orderstatus = $scope.users[id-1].orderstatus;\r\n");
      out.write("   $scope.ordercancel = $scope.users[id-1].ordercancel;\r\n");
      out.write("  }\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("$scope.$watch('orderid',function(){$scope.test();});\r\n");
      out.write("$scope.$watch('orderpay', function() {$scope.test();});\r\n");
      out.write("$scope.$watch('ordername', function() {$scope.test();});\r\n");
      out.write("$scope.$watch('ordertotal',function() {$scope.test();});\r\n");
      out.write("$scope.$watch('orderstatus',function() {$scope.test();});\r\n");
      out.write("$scope.$watch('ordercancel',function() {$scope.test();});\r\n");
      out.write("\r\n");
      out.write("$scope.test = function() {\r\n");
      out.write("\t\r\n");
      out.write("  if ($scope.edit && (!$scope.orderid.length || !$scope.orderpay.length || !$scope.ordername.length || !$scope.ordertotal.length || !$scope.orderstatus.length)) {\r\n");
      out.write("     $scope.incomplete = true;\r\n");
      out.write("  }\r\n");
      out.write("  $scope.incomplete = false;\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("});    \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
